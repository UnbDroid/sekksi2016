//SENSORES E MOTORES
#define MD OUT_B //motor da direita
#define ME OUT_A //motor da esquerda
#define MP OUT_C //motor da porta
#define USD IN_1 //Utrasonico da direita
#define USE IN_2 //Utrasonico da esquerda
#define HTD IN_3//hitech da direita
#define HTE IN_4//hitech da esquerda

//LOGICA
#define direita 1
#define esquerda 2

//Bluetooth
	#define SIM 5
	#define SIM_US 1
	#define SIM_GARRA 2
	#define NAO 0

	#define CONTINUA 6
	#define VIROU 7
	#define DESVIROU 8
	#define PARADO 27
	#define ANDANDO -2

	#define BONECO_BRANCO 4
	#define BONECO_PRETO 12
	#define BONECO_VERMELHO -1

	#define NAO_PEGA 9
	#define PEGA_OU_NAOPEGA 10
	#define PEGA 11

	//DEFINES BLUETOOTH
	#define CONECTA TRUE
	#define DESCONECTA FALSE
	//defines da conexao
	#define CONN 1
	#define INBOX 1
	#define OUTBOX 2

	//defines da struct

	#define CONSULTOR "LECA"
	#define ACAO CONECTA
	#define CONEXAO 1

//dist-
	#define DIST_DA_PAREDE 8
//cores
	#define COR_VERDE 5
	#define COR_AZUL 3 // 3 ou 14, 3 eh mais certo
	#define COR_PRETA 12 //12 ou 17, 12 eh mais certo
	#define COR_NEUTRA 13//BRANCO fica acima de 13

//
#define NAO_ALIEN 0
#define SIM_ALIEN 1

#define ANGULO_DESCARTA_ESQUERDA 900

//VARIAVEIS GLOBAIS
int my_tc_d = 0;
int my_tc_e = 0;
int potdGlobal = 90;
int poteGlobal = 83;
int corEsq = 99;
int corDir = 99;




//decleração das funções
void executivo(void);
void desligaBlue();
void Para();
int distanciaTachoCount(int grau);
int distanciaGiro(int grau);
void inicializaSensores();
void iniciaBlue();
void andaRetoDireita(int distParede, int distAndar);
void vira(int angulo, int direcao);
void DaReh();// IMPLEMENTAR

//Inicia cor do boneco
void CorDoChao(int corEsq, int corDir);
void IniciaCorDoChao(int corEsq, int corDir);
void RetornaBoneco(int cor);


//TESTAR
void ChecaParada();
void Rejeitar();
void ViraUmaRoda(int ang);
//Debug
void PrintaSensores(void);
void BipBranco();
void BipPreto();
void bip();



//função principal
task main()
{
	executivo();
}

//assinatura das funções
void executivo(){
	//bip();
  desligaBlue();
  inicializaSensores();
	iniciaBlue();
  
	IniciaCorDoChao(corEsq, corDir);

  andaRetoDireita(DIST_DA_PAREDE, 50);
  vira(90, direita);
	do{
    andaRetoDireita(DIST_DA_PAREDE, 50);
  }while(1);
}

void Para(){
	Off(MD);
	Off(ME);
}

int distanciaTachoCount(int grau){
     return (3*grau);                   //Distancia a ser percorrid/Raio da roda
}


int distanciaGiro(int grau){
     return (((grau*172)/1420)); // COMO FOI FEITA ESSA CONVERSÃO???
}


void inicializaSensores()
{
  SetSensorLowspeed(USD);
  SetSensorLowspeed(USE);
  SetSensorLowspeed(HTD);
  SetSensorLowspeed(HTE);
}

void vira(int angulo, int direcao){
     if(direcao == esquerda){
        OnFwd(MD, 90);
        OnFwd(ME, -90);

        while(distanciaGiro((MotorTachoCount(MD) - MotorTachoCount(ME))/2) < angulo)
        {
        //lol
        }
        Off(MD);
        Off(ME);

     }else if(direcao == direita){
        OnFwd(MD, -90);
        OnFwd(ME, 90);

        while(distanciaGiro((- MotorTachoCount(MD) + MotorTachoCount(ME))/2) < angulo)
        {
        //lol
        }
        Off(MD);
        Off(ME);
     }
}

void iniciaBlue(){// FUNCAO INICIA COMUNICACAO BLUETOOTH
     CommBTConnectionType DADOS_BT;
     DADOS_BT.Name = CONSULTOR;
     DADOS_BT.ConnectionSlot = CONEXAO;
     DADOS_BT.Action = ACAO;
     /*do{
        SysCommBTConnection(DADOS_BT);

        Wait(30);//30 ms eh o tempo de comunicacao minima bluetooth entre dois bricks

     }while(BluetoothStatus(CONEXAO)!= NO_ERR);
     */
     SysCommBTConnection(DADOS_BT);
     Wait(4000);
     TextOut(0, LCD_LINE2, "Conectou Bluetooth");
}

void andaRetoDireita(int distParede, int distAndar){ // função que faz o robô andar à "distParede" centímetros da parede por "distAndar" centímetros
     int distanciaAtual, potd, pote;
     my_tc_d = 0;
     my_tc_e = 0;

     while(distanciaTachoCount((my_tc_d + my_tc_e)/2) < (distAndar*100)){
       distanciaAtual = SensorUS(USD);

       //bip();
       ChecaParada();
       //bip();

       CorDoChao(corEsq, corDir);

       if (distanciaAtual == distParede){
         potd = 90;
         pote = 90;
       }
       else if(distanciaAtual > distParede){
         pote = 90;
         potd = 70;
       }
       else if(distanciaAtual < distParede){
         pote = 70;
         potd = 90;
       }

       my_tc_d += MotorTachoCount(MD);
       OnFwd(MD, potd);
       my_tc_e += MotorTachoCount(ME);
       OnFwd(ME, pote);

     }

     Off(MD);
     Off(ME);
}

void ChecaParada(){// TESTAR
	int acao = ANDANDO, int aux;

	ReceiveRemoteNumber(INBOX, true, acao);
	if (acao == PARADO){

		Para();
		SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
		do{
			ReceiveRemoteNumber(INBOX, true, aux);
			if(aux != 0){
        acao = aux;
      }
		}while(acao == PARADO);
		if(acao == CONTINUA){
      SendRemoteNumber(CONEXAO, OUTBOX, CONTINUA);
		}else{
			Rejeitar();
		}
	}else if(acao == SIM_US){
		vira(90, esquerda);
	}
	bip();
}

void Rejeitar(){// TESTAR
	int passei = NAO;
	ViraUmaRoda(ANGULO_DESCARTA_ESQUERDA);// manda o motor da direita virar um angulo dado pelo tachocount
	SendRemoteNumber(CONEXAO, OUTBOX, VIROU);
	do{
		ReceiveRemoteNumber(INBOX, true, passei);
		Wait(30);
	}while(passei != DESVIROU);
	ViraUmaRoda(-ANGULO_DESCARTA_ESQUERDA);
	SendRemoteNumber(CONEXAO, OUTBOX, DESVIROU);
}

void IniciaCorDoChao(int corEsq, int corDir){//FUNFOU BONITO
  
  corEsq = SensorHTColorNum(HTE);
  corDir = SensorHTColorNum(HTD);
  
  //bip();
  
  if((corDir == COR_VERDE) || (corEsq == COR_VERDE))
  {
    RetornaBoneco(COR_VERDE);
  }else //if((corDir == COR_AZUL) || (corEsq == COR_AZUL))
  {
    //bip();
    RetornaBoneco(COR_AZUL);
  }
}

void CorDoChao(int corEsq, int corDir){//TESTAR SE DA RE
  
  corEsq = SensorHTColorNum(HTE);
  corDir = SensorHTColorNum(HTD);
  
  if((corDir == COR_PRETA)||(corEsq == COR_PRETA)){//AREA KIEFAS == FOOOOOGE NEGADAA
    DaReh();
  }  
}

void RetornaBoneco(int cor){//FUNFOU BONITO
    int passei = 0;
    ClearScreen();
    do{
      //bip();
      if(cor == COR_AZUL){//BONECO COR BRANCA

        SendRemoteNumber(CONEXAO, OUTBOX, BONECO_BRANCO);
        Wait(30);
        bip();
      }else if(cor == COR_VERDE){//BONECO COR PRETA      
        SendRemoteNumber(CONEXAO, OUTBOX, BONECO_PRETO);
        Wait(30);
      }
      TextOut(0, LCD_LINE4, "SINAL MANDADO");
      ReceiveRemoteNumber(INBOX, true, passei);

   }while(passei != SIM);
}


//funcoes de debug
void PrintaSensores(){
    ClearScreen();
    TextOut(0, LCD_LINE1, "USD: ");
    NumOut(0, LCD_LINE2, SensorUS(USD));
    TextOut(0, LCD_LINE3, "USE: ");
    NumOut(0, LCD_LINE4, SensorUS(USE));
    TextOut(0, LCD_LINE5, "HTD: ");
    NumOut(0, LCD_LINE6, SensorHTColorNum(HTD));
    TextOut(0, LCD_LINE7, "HTE: ");
    NumOut(0, LCD_LINE8, SensorHTColorNum(HTE));
    Wait(70);
}

void DaReh(){
  OnRev(MD, potdGlobal);
  OnRev(ME, poteGlobal);
  Wait(500);
}

void ViraUmaRoda(int ang){
   my_tc_d = 0;
    
  OnFwd(MD, 50);
  do{

  //}while(distanciaTachoCount(my_tc_d) < ang*100 );
  }while(MotorTachoCount(MD) < ang);//para o angulo negativo n sei
  Para();
  while(1);
}


void BipBranco(){
  PlaySound(SOUND_UP);
  PlaySound(SOUND_DOWN);
  Wait(SEC_1);
}

void  BipPreto(){
  PlaySound(SOUND_DOWN);
  PlaySound(SOUND_UP);
  Wait(SEC_1);
}

void  bip(){
  PlaySound(SOUND_UP);
}

void desligaBlue(){
     CommBTConnectionType DADOS_BT;
     DADOS_BT.Name = CONSULTOR;
     DADOS_BT.ConnectionSlot = CONEXAO;
     DADOS_BT.Action = DESCONECTA;
     do{
        SysCommBTConnection(DADOS_BT);

        Wait(30);//30 ms eh o tempo de comunicacao minima bluetooth entre dois bricks

     }while(BluetoothStatus(CONEXAO)== NO_ERR);
     TextOut(0, LCD_LINE1, "Desligou Bluetooth");
}
