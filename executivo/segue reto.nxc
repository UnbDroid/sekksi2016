//MACROS
//PARAMETROS (REGULAR!!!! SEMPRE!!!!!)

//CORES
#define AZUL 2
#define VERDE 4
#define BRANCO_MIN 12
#define BRANCO_MAX 17
#define PRETO 0

//DIST
#define DIST_DA_PAREDE 8
#define DIST_BASE 40

//LOGICA
#define direita 1
#define esquerda 2
#define tempoVirada 300
#define modoTempo 1
#define modoDist 2
#define modoSensorUS 3
#define modoSensorCHAO 4
#define modoAchaOPRETO 5



//SENSORES E MOTORES
#define MD OUT_B //motor da direita
#define ME OUT_A //motor da esquerda
#define MP OUT_C //motor da porta
#define USD IN_1 //Utrasonico da direita
#define USE IN_2 //Utrasonico da esquerda
#define HTD IN_3//hitech da direita
#define HTE IN_4//hitech da esquerda

//COMUNICACAO BLUETOOTH
#define BT_CONN 1
#define INBOX 1
#define OUTBOX 5




//VARIAVEIS GLOBAIS
int my_tc_d;
int my_tc_e;

int potdGlobal = 90;
int poteGlobal = 80;




// DECLARAÇÃO DE FUNÇÕES
void inicializaSensores();

int distanciaTachoCount(int grau);
int distanciaGiro(int grau);

void andaRetoDireita(int distParede, int distAndar);
void andaRetoEsquerda(int distParede, int distAndar);
void andaReto1();
void andaReto2();


void vira(int angulo, int direcao);
void viraEsq(int angulo);
void viraDir(int angulo);

void Para();
void Regula(int iteracoes);
void AndaReto();
void Reto(int modo, int var);
void iniciaReto();


void inicializaSensores()
{
  SetSensorLowspeed(USD);
  SetSensorLowspeed(USE);
  SetSensorLowspeed(HTD);
  SetSensorLowspeed(HTE);
}

void andaReto1(){  // função que faz ele andar reto aumentando a potência do motor mais lento
        int potd, pote;

        potd = 70;
        pote = 70;

        OnFwd(MD, potd);
        OnFwd(ME, pote);
        Wait(200);
        
        if(MotorTachoCount(MD) > MotorTachoCount(ME)){
          while(MotorTachoCount(MD) > MotorTachoCount(ME))
          {
             pote+=5;
             if(pote>=90){
                          //PAU!!!
                          Off(MD);
                          Off(ME);
                          while(1){}
             }
              OnFwd(MD, potd);
              OnFwd(ME, pote);
              Wait(200);
          }

        }
        else{
           while(MotorTachoCount(MD) < MotorTachoCount(ME))
           {
             potd+=5;
             if(potd>=90){
                          //PAU!!!
                           Off(MD);
                          Off(ME);
                          while(1){}
             }
              OnFwd(MD, potd);
              OnFwd(ME, pote);
              Wait(200);
           }

        }
        
       // Off(MD);
        //Off(ME);
        NumOut(0, LCD_LINE1, MotorTachoCount(MD));
        NumOut(0, LCD_LINE2, MotorTachoCount(ME));
        NumOut(0, LCD_LINE3, potd);
        NumOut(0, LCD_LINE4, pote);
        
        OnFwd(MD, potd);
        OnFwd(ME, pote);
        Wait(10000);
        
        ClearScreen();
        NumOut(0, LCD_LINE1, MotorTachoCount(MD));
        NumOut(0, LCD_LINE2, MotorTachoCount(ME));
        NumOut(0, LCD_LINE3, potd);
        NumOut(0, LCD_LINE4, pote);
        Off(MD);
        Off(ME);
        
        while(1){}
}

void andaReto2(){  // função que faz ele andar reto reduzindo a potência do motor mais rápido
        int potd, pote;

        potd = 90;
        pote = 90;

        OnFwd(MD, potd);
        OnFwd(ME, pote);
        Wait(250);

        if(MotorTachoCount(MD) > MotorTachoCount(ME)){
          while(MotorTachoCount(MD) > MotorTachoCount(ME))
          {
             potd-=1;

              OnFwd(MD, potd);
              OnFwd(ME, pote);
              Wait(200);
          }

        }
        else{
           while(MotorTachoCount(MD) < MotorTachoCount(ME))
           {
             pote-=1;

              OnFwd(MD, potd);
              OnFwd(ME, pote);
              Wait(200);
           }

        }

       // Off(MD);
        //Off(ME);
        NumOut(0, LCD_LINE1, MotorTachoCount(MD));
        NumOut(0, LCD_LINE2, MotorTachoCount(ME));
        NumOut(0, LCD_LINE3, potd);
        NumOut(0, LCD_LINE4, pote);

        OnFwd(MD, potd);
        OnFwd(ME, pote);
        Wait(10000);

        ClearScreen();
        NumOut(0, LCD_LINE1, MotorTachoCount(MD));
        NumOut(0, LCD_LINE2, MotorTachoCount(ME));
        NumOut(0, LCD_LINE3, potd);
        NumOut(0, LCD_LINE4, pote);

        TextOut(0, LCD_LINE5, "POkemon");
        Off(MD);
        Off(ME);

        while(1){}
}

void andaReto3(){


        int potd, pote;
        potd = 90;
        pote = 90;

        OnFwd(MD, potd);
        OnFwd(ME, pote);
        Wait(350);


        if(MotorTachoCount(MD) > MotorTachoCount(ME)){
            potd -= 8;
            for(int c = 4; c >= 1; c/=2){
                    OnFwd(MD, potd);
                    OnFwd(ME, pote);
                    Wait(250);
                    if(MotorTachoCount(MD) == MotorTachoCount(ME)){
                       c = 0;
                    }else if(MotorTachoCount(MD) > MotorTachoCount(ME)){
                          potd -= c;
                    }else{
                         potd += c;
                    }
             }

        }else if(MotorTachoCount(MD) < MotorTachoCount(ME)){
            pote -= 8;
            for(int c = 4; c >= 1; c/=2){
                    OnFwd(MD, potd);
                    OnFwd(ME, pote);
                    Wait(250);
                    if(MotorTachoCount(MD) == MotorTachoCount(ME)){
                       c = 0;
                    }else if(MotorTachoCount(ME) > MotorTachoCount(MD)){
                          pote -= c;
                    }else{
                         pote += c;
                    }
             }
        }



        NumOut(0, LCD_LINE1, MotorTachoCount(MD));
        NumOut(0, LCD_LINE2, MotorTachoCount(ME));
        NumOut(0, LCD_LINE3, potd);
        NumOut(0, LCD_LINE4, pote);

        OnFwd(MD, potd);
        OnFwd(ME, pote);
        Wait(10000);

        ClearScreen();
        NumOut(0, LCD_LINE1, MotorTachoCount(MD));
        NumOut(0, LCD_LINE2, MotorTachoCount(ME));
        NumOut(0, LCD_LINE3, potd);
        NumOut(0, LCD_LINE4, pote);
        TextOut(0, LCD_LINE5, "POkemon");
        Off(MD);
        Off(ME);

        while(1){}


}


void Para(){
     Off(ME);
     Off(MD);
}

void Regula(int iteracoes){
     int i;

     while(i < iteracoes){
        if(MotorTachoCount(MD) > MotorTachoCount(ME)){
            if(poteGlobal < 90){
               poteGlobal += 1;
            }else
               potdGlobal -= 1;

        }else if(MotorTachoCount(MD) < MotorTachoCount(ME)){
            if(potdGlobal < 90){
               potdGlobal += 1;
            }else
               poteGlobal -= 1;
        }
        i++;
     }
     
     
}


void AndaReto(){
     OnFwd(MD, potdGlobal);
     OnFwd(ME, poteGlobal);
}



void iniciaReto(){
     int tachoD = 0;
     int tachoE = 0;
     
     Off(MD);
     Off(ME);

     /*do{
        ResetTachoCount(MD);
        ResetTachoCount(ME);
     }while((MotorTachoCount(MD) != 0)&&(MotorTachoCount(ME) != 0));
       */
     while(distanciaTachoCount((tachoD + tachoE)/2) < (DIST_BASE + DIST_DA_PAREDE)){
        tachoD = MotorTachoCount(MD);
        tachoE = MotorTachoCount(ME);
        OnFwd(MD, potdGlobal);
        OnFwd(ME, poteGlobal);
        PlaySound(SOUND_LOW_BEEP);
        Wait(MS_500);
        PlaySound(SOUND_FAST_UP);

        Regula(1);
     }
}






void Reto(int modo, int var){

     int temp0, temp1;

     Off(MD);
     Off(ME);

     switch(modo){
        case modoTempo:
             temp0 = CurrentTick();
             while(CurrentTick() - temp0 <= var){
                  OnFwd(MD, potdGlobal);

                  //TERMINAR
                  OnFwd(ME, poteGlobal);
                  temp1 = CurrentTick();
                    PlaySound(SOUND_LOW_BEEP);
                    Wait(MS_500);
                    PlaySound(SOUND_FAST_UP);
  
                  while(CurrentTick() - temp1 <= 200){
                        //CHECAR OS INBOXs AQUI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                  }
                  Regula(5);
             }
             Off(MD);
             Off(ME);
        break;
     }


}
     

void andaRetoDireita(int distParede, int distAndar){ // função que faz o robô andar à "distParede" centímetros da parede por "distAndar" centímetros
	   int distanciaAtual, potd, pote;
	   my_tc_d = 0;
	   my_tc_e = 0;

	   while(distanciaTachoCount((my_tc_d + my_tc_e)/2) < (distAndar*100)){
	 	   distanciaAtual = SensorUS(USD);
		
		   if (distanciaAtual == distParede){
			   potd = 90;
			   pote = 90;
		   }
		   else if(distanciaAtual > distParede){
			   pote = 90;
			   potd = 70;
		   }
		   else if(distanciaAtual < distParede){
			   pote = 70;
		   	 potd = 90;
		   }

       my_tc_d += MotorTachoCount(MD);
		   OnFwd(MD, potd);
		   my_tc_e += MotorTachoCount(ME);
	   	 OnFwd(ME, pote);

	   }

	   Off(MD);
	   Off(ME);

}

void andaRetoEsquerda(int distParede, int distAndar){ // função que faz o robô andar à "distParede" centímetros da parede por "distAndar" centímetros
	   int distanciaAtual, potd, pote;
	   my_tc_d = 0;
	   my_tc_e = 0;

	   while(distanciaTachoCount((my_tc_d + my_tc_e)/2) < (distAndar*100)){
	 	   distanciaAtual = SensorUS(USD);

		   if (distanciaAtual == distParede){
			   potd = 90;
			   pote = 90;
		   }
		   else if(distanciaAtual > distParede){
			   potd = 90;
			   pote = 70;
		   }
		   else if(distanciaAtual < distParede){
			   potd = 70;
		   	 pote = 90;
		   }

       my_tc_d += MotorTachoCount(MD);
		   OnFwd(MD, potd);
		   my_tc_e += MotorTachoCount(ME);
	   	 OnFwd(ME, pote);

	   }

	   Off(MD);
	   Off(ME);

}

int distanciaTachoCount(int grau){
	   return (3*grau);                   //Distancia a ser percorrid/Raio da roda
}

int distanciaGiro(int grau){
	   return (((grau*172)/1420)); // COMO FOI FEITA ESSA CONVERSÃO???
}

void vira(int angulo, int direcao){  //TESTE
     if(direcao == esquerda){
        OnFwd(MD, 90);
        OnFwd(ME, -90);

        while(distanciaGiro((MotorTachoCount(MD) - MotorTachoCount(ME))/2) < angulo)
        {
        //lol
        }
        Off(MD);
        Off(ME);

     }else if(direcao == direita){
        OnFwd(MD, -90);
        OnFwd(ME, 90);

        while(distanciaGiro((- MotorTachoCount(MD) + MotorTachoCount(ME))/2) < angulo)
        {
        //lol
        }
        Off(MD);
        Off(ME);
     }
}

void viraEsq(int angulo){ // função que faz o robô girar para a esquerda o ângulo recebido
     OnFwd(MD, 90);
     OnFwd(ME, -90);

     while(distanciaGiro((MotorTachoCount(MD) - MotorTachoCount(ME))/2) < angulo)
     {
      //lol
     }
     Off(MD);
     Off(ME);
}


void viraDir(int angulo){ // função que faz o robô girar para a direita o ângulo recebido
     OnFwd(MD, -90);
     OnFwd(ME, 90);

     while(distanciaGiro((- MotorTachoCount(MD) + MotorTachoCount(ME))/2) < angulo)
     {
      //lol
     }
     Off(MD);
     Off(ME);
}

task main(){
	   inicializaSensores();

     //iniciaReto();
      //andaRetoDireita(30);
     //Para();
     //vira(94, esquerda);
     //vira(95, direita);
     
     //NumOut(0, LCD_LINE3, potdGlobal);//90
     //NumOut(0, LCD_LINE4, poteGlobal);//81
     
     //while(1);

     //AndaReto();
     

     //Reto(modoTempo, 10000);
     //andaReto2();
     
     andaRetoDireita(15, 100);
}
