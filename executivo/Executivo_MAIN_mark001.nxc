//SENSORES E MOTORES
#define MD OUT_B //motor da direita
#define ME OUT_A //motor da esquerda
#define MP OUT_C //motor da porta
#define USD IN_1 //Utrasonico da direita
#define USE IN_2 //Utrasonico da esquerda
#define HTD IN_3//hitech da direita
#define HTE IN_4//hitech da esquerda

//LOGICA

#define direita 1
#define esquerda 2


 #define SIM 5
 #define SIM_US 1
 #define SIM_GARRA 2
 #define NAO 0
 #define CONTINUA 6
 #define VIROU 7
#define DESVIROU 8
   //Bluetooth
 #define PARADO 0
 #define BONECO_BRANCO 4
 #define BONECO_PRETO 5
 #define LeGARRA_SENSOR 3
 #define NAO_PEGA 9
 #define PEGA_OU_NAOPEGA 10
 #define PEGA 11

  //dist
#define DIST_RE 30
#define DIST_DA_PAREDE 8
  //cores
#define COR_VERDE 5 
#define COR_AZUL 3 // 3 ou 14, 3 eh mais certo
#define COR_PRETA 12 //12 ou 17, 12 eh mais certo
#define COR_NEUTRA 13//BRANCO fica acima de 13



//DEFINES BLUETOOTH

#define CONECTA TRUE
#define DESCONECTA FALSE
//defines da conexao
#define CONN 1

#define INBOX 1
#define OUTBOX 2



//===========================================

//defines da struct

#define CONSULTOR "LECA"
#define ACAO CONECTA
#define CONEXAO 1

//VARIAVEIS GLOBAIS
int my_tc_d = 0;
int my_tc_e = 0;
int potdGlobal = 90;
int poteGlobal = 83;



//declaracao de funf

void iniciaBlue(void);
void desligaBlue(void);
void inicializaSensores(void);


int distanciaGiro(int grau);
int distanciaTachoCount(int grau);

void andaRetoDireita(int distParede, int distAndar);
void Para(void);
void vira(int angulo, int direcao);

void LeUSFRENTE();
void LeGARRA();
void ChecaParada();

void CorDoChao(int corEsq, int corDir);
void IniciaCorDoChao(int corEsq, int corDir);
void DaReh();
void RetornaBoneco(int cor);



//DEBUG
void teste1(void);
void teste2(void);
void PrintaSensores(void);


int distanciaTachoCount(int grau){
     return (3*grau);                   //Distancia a ser percorrid/Raio da roda
}

void inicializaSensores()
{
  SetSensorLowspeed(USD);
  SetSensorLowspeed(USE);
  SetSensorLowspeed(HTD);
  SetSensorLowspeed(HTE);
}


void iniciaBlue(){// FUNCAO INICIA COMUNICACAO BLUETOOTH
     CommBTConnectionType DADOS_BT;
     DADOS_BT.Name = CONSULTOR;
     DADOS_BT.ConnectionSlot = CONEXAO;
     DADOS_BT.Action = ACAO;
     /*do{
        SysCommBTConnection(DADOS_BT);

        Wait(30);//30 ms eh o tempo de comunicacao minima bluetooth entre dois bricks

     }while(BluetoothStatus(CONEXAO)!= NO_ERR);
     */
     SysCommBTConnection(DADOS_BT);
      Wait(4000);
     TextOut(0, LCD_LINE2, "Conectou Bluetooth");
}

void desligaBlue(){
     CommBTConnectionType DADOS_BT;
     DADOS_BT.Name = CONSULTOR;
     DADOS_BT.ConnectionSlot = CONEXAO;
     DADOS_BT.Action = DESCONECTA;
     do{
        SysCommBTConnection(DADOS_BT);

        Wait(30);//30 ms eh o tempo de comunicacao minima bluetooth entre dois bricks

     }while(BluetoothStatus(CONEXAO)== NO_ERR);
     TextOut(0, LCD_LINE1, "Desligou Bluetooth");
}




int distanciaGiro(int grau){
	   return (((grau*172)/1420)); // COMO FOI FEITA ESSA CONVERSÃO???
}

void vira(int angulo, int direcao){  //TESTE
     if(direcao == esquerda){
        OnFwd(MD, 90);
        OnFwd(ME, -90);

        while(distanciaGiro((MotorTachoCount(MD) - MotorTachoCount(ME))/2) < angulo)
        {
        //lol
        }
        Off(MD);
        Off(ME);

     }else if(direcao == direita){
        OnFwd(MD, -90);
        OnFwd(ME, 90);

        while(distanciaGiro((- MotorTachoCount(MD) + MotorTachoCount(ME))/2) < angulo)
        {
        //lol
        }
        Off(MD);
        Off(ME);
     }
}


void Para(){
     Off(ME);
     Off(MD);
}

void Bip(){
  PlaySound(SOUND_UP);
  PlaySound(SOUND_DOWN);
  Wait(SEC_1);
}

void ChecaParada(){//TESTAR SE PARA QUANDO DEVE, E SE NAO DEMORA MUITO
  int leitura = 0;

  do{
    ReceiveRemoteNumber(INBOX, true, leitura);
    Wait(30);
    SendRemoteNumber(CONEXAO, OUTBOX, SIM);
    Wait(30);
  }while(leitura == 0);
  
  if(leitura == SIM_US){
   Bip();
     
  LeUSFRENTE();
  }else if(leitura == SIM_GARRA){
    LeGARRA();
  }
}

void LeUSFRENTE(){
  Para();
  vira(90, esquerda); //VIRA PRA ALGUM LUGAR  
}

void LeGARRA(){// TESTE SE PARA QUANDO DEVE, E CONTINUA QUANDO DEVE
  int verifica = 0, continua = 0;
  
  do{
      Para();
      SendRemoteNumber(CONEXAO, OUTBOX, PEGA_OU_NAOPEGA);
      ReceiveRemoteNumber(INBOX, true, verifica);
      Wait(30);
  }while((verifica != NAO_PEGA)||(verifica != PEGA));

  if(verifica == NAO_PEGA){

    vira(90, esquerda);

    do{
      SendRemoteNumber(CONEXAO, OUTBOX, VIROU);
      ReceiveRemoteNumber(INBOX, true, verifica);
      Wait(30);
    }while(verifica != VIROU);

    do{
      SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
      ReceiveRemoteNumber(INBOX, true, verifica);
      Wait(30);
    }while(verifica != PARADO);

    vira(90, direita);

    do{
      SendRemoteNumber(CONEXAO, OUTBOX, DESVIROU);
      ReceiveRemoteNumber(INBOX, true, verifica);
      Wait(30);
    }while(verifica != DESVIROU);
  }else if(verifica == PEGA){
    do{
          SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
          ReceiveRemoteNumber(INBOX, true, verifica);
          Wait(30);
      }while(verifica != PARADO);    
  }


  do{
      SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
      ReceiveRemoteNumber(INBOX, true, continua);
      Wait(30);
  }while(continua != CONTINUA);

  
}

void DaReh(){ //TESTAR SE SAI DO DOWHILE
  
  int tachoCountD = 0, tachoCountE = 0;
  OnRev(MD, potdGlobal);
  OnRev(ME, poteGlobal);
  do{
    tachoCountE = MotorTachoCount(ME);
    tachoCountD = MotorTachoCount(MD);
  }while(distanciaTachoCount((tachoCountD + tachoCountE)/2) != DIST_RE*100);
  
  Off(MD);
  Off(ME);
}

void IniciaCorDoChao(int corEsq, int corDir){//FUNFOU BONITO
  
  corEsq = SensorHTColorNum(HTE);
  corDir = SensorHTColorNum(HTD);
  
  if((corDir == COR_VERDE) || (corEsq == COR_VERDE)){
    RetornaBoneco(COR_VERDE);
  }else if((corDir == COR_AZUL) || (corEsq == COR_AZUL)){
    RetornaBoneco(COR_AZUL);
  }
}

void CorDoChao(int corEsq, int corDir){//TESTAR SE DA RE
  
  corEsq = SensorHTColorNum(HTE);
  corDir = SensorHTColorNum(HTD);
  
  if((corDir == COR_PRETA)||(corEsq == COR_PRETA)){//AREA KIEFAS == FOOOOOGE NEGADAA
    DaReh();
  }  
}

void RetornaBoneco(int cor){//FUNFOU BONITO
    int passei;
    
    do{
      if(cor == COR_AZUL){//BONECO COR BRANCA
        SendRemoteNumber(CONEXAO, OUTBOX, BONECO_BRANCO);
        ReceiveRemoteNumber(INBOX, true, passei);
        Wait(30);
      }else if(cor == COR_VERDE){//BONECO COR PRETA
        SendRemoteNumber(CONEXAO, OUTBOX, BONECO_PRETO);
        ReceiveRemoteNumber(INBOX, true, passei);
        Wait(30);
      }
  }while(passei != SIM);
}


void andaRetoDireita(int distParede, int distAndar){ // função que faz o robô andar à "distParede" centímetros da parede por "distAndar" centímetros
     int distanciaAtual, potd, pote;
     my_tc_d = 0;
     my_tc_e = 0;

     while(distanciaTachoCount((my_tc_d + my_tc_e)/2) < (distAndar*100)){
       distanciaAtual = SensorUS(USD);
    
       if (distanciaAtual == distParede){
         potd = 90;
         pote = 90;
       }
       else if(distanciaAtual > distParede){
         pote = 90;
         potd = 70;
       }
       else if(distanciaAtual < distParede){
         pote = 70;
         potd = 90;
       }

       my_tc_d += MotorTachoCount(MD);
       OnFwd(MD, potd);
       my_tc_e += MotorTachoCount(ME);
       OnFwd(ME, pote);

     }

     Off(MD);
     Off(ME);
}



//========================================================================
//FUNCOES DEBUG
void teste1(){
      int aux1 = 0, aux = 0;
      desligaBlue();
      iniciaBlue();

     while(aux1==0)
     {
          SendRemoteNumber(CONEXAO, OUTBOX, 1);
          ReceiveRemoteNumber(INBOX, true, aux1);
          Wait(30);
     }
     TextOut(30, LCD_LINE2, "passei2");
     
     //Repete a funcao de receber valor do ultrassom
     
     do{

          while(aux==0)
          {
               OnFwd(OUT_A, 60);
               OnFwd(OUT_B, 60);
               Wait(20);
               ReceiveRemoteNumber(INBOX, true, aux);
          }
          if(aux == 1){
               TextOut(30, LCD_LINE3, "passei3");
               vira(90, direita);
               Wait(100);
               ReceiveRemoteNumber(INBOX, true, aux);
               Wait(40);
               if(aux == 1){
                    vira(180, esquerda);
                    Wait(100);
               }
               else{
                    TextOut(30, LCD_LINE4, "funfou");
                    Wait(100);
               }
          }

          Off(OUT_A);
          Off(OUT_B);

          Wait(100);

     }while(1);
}
//======================================================================
void teste2COMUNICA(){
  int corDir = 0, corEsq = 0;

  inicializaSensores();
  desligaBlue();
  iniciaBlue();

  //IniciaCorDoChao(corEsq, corDir);
  andaRetoDireita(DIST_DA_PAREDE, 10);
  vira(90, direita);

  do{
    //PrintaSensores();
    //ChecaParada();
    //CorDoChao(corEsq, corDir);
    andaRetoDireita(DIST_DA_PAREDE, 10);
  }while(SIM);

}

void PrintaSensores(){
  inicializaSensores();
//  while(1){
    ClearScreen();
    TextOut(0, LCD_LINE1, "USD: ");
    NumOut(0, LCD_LINE2, SensorUS(USD));
    TextOut(0, LCD_LINE3, "USE: ");
    NumOut(0, LCD_LINE4, SensorUS(USE));
    TextOut(0, LCD_LINE5, "HTD: ");
    NumOut(0, LCD_LINE6, SensorHTColorNum(HTD));
    TextOut(0, LCD_LINE7, "HTE: ");
    NumOut(0, LCD_LINE8, SensorHTColorNum(HTE));
    Wait(70);
  //}
}

task main()// programa simples de teste
{
  teste2COMUNICA();
}
