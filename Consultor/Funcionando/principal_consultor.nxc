//Valores Calibraveis
// Defines de leitura do RGB do meio (ainda precisa testar mais)
    #define COR_PRETA_MEIO_MIN 80
    #define COR_PRETA_MEIO_MAX 146
    #define COR_BRANCA_MEIO_MIN 455
    #define COR_BRANCA_MEIO_MAX 566
    #define COR_VERMELHA_MEIO_MIN 121
    #define COR_VERMELHA_MEIO_MAX 203

 // Defines de leitura do RGB da esquerda do robô
    #define COR_BASE_ESQ_MIN 243
    #define COR_BASE_ESQ_MAX 304

// Defines de leitura do RGB da direita do robô
    #define COR_BASE_DIR_MIN 271
    #define COR_BASE_DIR_MAX 320




//DEFINES

     //Bluetooth
     #define CONEXAO 0
     #define INBOX 2
     #define OUTBOX 1



     // Defines de sensores
     #define RGB_DIR IN_1
     #define RGB_ESQ IN_2
     #define RGB_MEIO IN_3
     #define US_FRENTE IN_4

     // Defines de motores
     #define MOTOR_GARRA OUT_A


    //Tempos
    //#define TEMPO_ATE_A_GARRA_TRAVAR 2000
    #define TEMPO_ATE_JOGAR_DENTRO 3750
    //#define TEMPO_ATE_A_GARRA_VOLTAR 2000 //estou usando tempo... rola de usar por angulos depois
    #define TEMPO_DEPOIS_DE_JOGAR_DENTRO_GARANTIA 800

    //misc
    #define MENOR_DISTANCIA_US 15


     //LOGICA

#define direita 1
#define esquerda 2

//Bluetooth
  #define SIM 5
  #define SIM_US 1
  #define NAO_US 3
  #define SIM_GARRA 2
  #define NAO 0

  #define CONTINUA 6
  #define VIROU 7
  #define DESVIROU 8
  #define PARADO 27
  #define ANDANDO -2

  #define BONECO_BRANCO 4
  #define BONECO_PRETO 12
  #define BONECO_VERMELHO -1

  #define NAO_PEGA 9
  #define PEGA_OU_NAOPEGA 10
  #define PEGA 11
//dist
  #define DIST_RE 30
  #define DIST_DA_PAREDE 8
//cores
  #define COR_VERDE 5
  #define COR_AZUL 3 // 3 ou 14, 3 eh mais certo
  #define COR_PRETA 12 //12 ou 17, 12 eh mais certo
  #define COR_NEUTRA 13//BRANCO fica acima de 13

  #define NAO_ALIEN 0
  #define SIM_ALIEN 1

//Garra
  //potencias
  #define POTENCIA_MAXIMA_GARRA -70
  #define POTENCIA_MED_GARRA -40

  //Tempos
  #define TEMPO_DEPOIS_DE_JOGAR_DENTRO 200

  //Defines angulos da garra
  #define ANGULO_1 -77

  #define VETOR_CALIBRACAO 11

//declaração das variáveis globais
int bonecoAlvo;
int bonecoNaoAlvo;


//declaração das funções
void InicializaSensores();
int returnUS();
int TemBoneco();
int lerSensor(int sensor);
int PegaBoneco();
void VoltaGarra(void);
int RecebeBoneco();
void BonecoAlvo();
void BipBranco();
void BipPreto();
void Pega();
int CorBoneco();
int filterRGB(int s);
void  bip();

//implementando
void MandaPara();
void Rejeitar();
void MandaContinuar();

void FechaDeLeves();
void VoltaAoNormal();

void consultor();

//função principal
task main(){
    consultor();
}



//assinatura das funçõa
void InicializaSensores(){
    SetSensorColorRed(RGB_DIR);
    SetSensorColorRed(RGB_ESQ);
    SetSensorColorGreen(RGB_MEIO);
    SetSensorLowspeed(US_FRENTE);
}

int returnUS(){
  int valor = 0;
  valor = SensorUS(US_FRENTE);
  Wait(30);
  NumOut(0, LCD_LINE1, valor);
  
  if(valor < MENOR_DISTANCIA_US){
    return 1;
  }
  else
    return 0;
}

void BipBranco(){
  PlaySound(SOUND_UP);
  PlaySound(SOUND_DOWN);
  Wait(SEC_1);
}

void  BipPreto(){

  PlaySound(SOUND_DOWN);
  PlaySound(SOUND_UP);
  Wait(SEC_1);
}

void BonecoAlvo(){
  //bip();
  bonecoAlvo = RecebeBoneco();
    
    if(bonecoAlvo == BONECO_PRETO){
      BipPreto();
    }else if(bonecoAlvo == BONECO_BRANCO){
      BipBranco();
    }

}

void consultor(){
    int cor;

    InicializaSensores();
    //bip();
    BonecoAlvo();
    //bip();
    VoltaGarra();

    while(1){//void loop
        //bip();
        if(returnUS()){
            //bip();
            SendRemoteNumber(CONEXAO, OUTBOX, SIM_US);
            //TextOut(0, LCD_LINE2, "Mandei ultrassom carai");
        }else
        {
          //bip();
          if(TemBoneco())//if(filterRGB(RGB_DIR) && filterRGB(RGB_ESQ))
          {
              //bip();
              MandaPara();//implementar uma função que manda o executivo para e esperar a confirmação que ele parou
              //bip();

              //FechaDeLeves();
              
              if(PegaBoneco())
              {
                  cor = CorBoneco();
                  if(cor == bonecoAlvo)
                  {
                      Pega();//esta função deve pegar sem mandar continuar
                  }
                  else if(cor == bonecoNaoAlvo)
                  {
                      Rejeitar();//esta função tem que comunicar com o executivo
                  }
                  else if(cor == BONECO_VERMELHO)
                  {
                      //AINDA NÃO SABEMOS O QUE FAZER AQUI
                  }
              }

              MandaContinuar();
          }
          else
          {
              //bip();
          }
        }
    }
}

int TemBoneco(){
   int rgb_esq, rgb_dir;
   
   //bip();
   
   rgb_dir = lerSensor(RGB_DIR);
   rgb_esq = lerSensor(RGB_ESQ);
   


   NumOut(0, LCD_LINE2, rgb_dir);
   NumOut(0, LCD_LINE3, rgb_esq);
   
   
   if(((rgb_dir < COR_BASE_DIR_MAX) && (rgb_dir > COR_BASE_DIR_MIN)) && ((rgb_esq < COR_BASE_ESQ_MAX) && (rgb_esq > COR_BASE_ESQ_MIN)))
      return NAO_ALIEN;
   return SIM_ALIEN;
}

int lerSensor(int sensor){
   int i, j, k, aux;
   int leitura[VETOR_CALIBRACAO];

   for(i=0; i<VETOR_CALIBRACAO; i++){
      aux = SensorRaw(sensor);

      j = 0;
      while(aux < leitura[j] && j<i){
         j++;
      }

      if(j<i){
         for(k=i; k>j; k--){
            leitura[k] = leitura[k-1];
         }
         leitura[j] = aux;
      }
      else{
         leitura[i] = aux;
      }
   }

   return leitura[(VETOR_CALIBRACAO - 1)/2];
}

int PegaBoneco()
{
    int tc, old_tc;

    OnFwd(MOTOR_GARRA,-30);
    tc = MotorTachoCount(MOTOR_GARRA);

    do
      {
        Wait(200);
        old_tc = tc;
        tc = MotorTachoCount(MOTOR_GARRA);
        if(tc<-118)
        {
            OnFwd(MOTOR_GARRA,0);
            //Bip();//colocar uma função mais rápida de bipar
            VoltaGarra();
            return 0;//deu errado pegar o boneco
        }
      }while(tc!=old_tc);

      OnFwd(MOTOR_GARRA,0);

      return 1;//pegou o boneco com sucesso
}

void VoltaGarra(void)
{
    int tc, old_tc;

    OnFwd(MOTOR_GARRA,30);
      tc = MotorTachoCount(MOTOR_GARRA);
      do
      {
        Wait(200);
        old_tc = tc;
        tc = MotorTachoCount(MOTOR_GARRA);
      }while(tc!=old_tc);

      OnFwd(MOTOR_GARRA,0);
}



int RecebeBoneco(){
     int sinInicial = 0;
     //bip();
     do{
          //ClearScreen();
          ReceiveRemoteNumber(INBOX, true, sinInicial);
          //NumOut(0, LCD_LINE1, sinInicial);
          //TextOut(0, LCD_LINE2, "SINAL INICIAL");
          //bip();
          Wait(30);
          
     }while(sinInicial == 0);
     SendRemoteNumber(CONEXAO, OUTBOX, SIM);
     Wait(50);
     if(sinInicial == BONECO_PRETO)
          return BONECO_PRETO;
     else if(sinInicial == BONECO_BRANCO)
          return BONECO_BRANCO;
}



int CorBoneco()//TESTAR
{
    int leitura;

    leitura = lerSensor(RGB_MEIO);

    if((leitura < COR_BRANCA_MEIO_MAX)&&(leitura > COR_BRANCA_MEIO_MIN))
        return BONECO_BRANCO;
    if((leitura < COR_PRETA_MEIO_MAX)&&(leitura > COR_PRETA_MEIO_MIN))
        return BONECO_PRETO;
    if((leitura < COR_VERMELHA_MEIO_MAX)&&(leitura > COR_VERMELHA_MEIO_MIN))
        return BONECO_VERMELHO;
}

void MandaPara(){ //TESTAR
  int passei = ANDANDO;
  do{
    SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
    ReceiveRemoteNumber(INBOX, true, passei);
    Wait(30);
  }while(passei != PARADO);
}

void Rejeitar(){ //TESTAR
  int passei = PARADO;
  
  do{
    SendRemoteNumber(CONEXAO, OUTBOX, VIROU);
    ReceiveRemoteNumber(INBOX, true, passei);
    Wait(30);
  }while(passei != VIROU);
  
  VoltaAoNormal();

  do{
    SendRemoteNumber(CONEXAO, OUTBOX, DESVIROU);
    ReceiveRemoteNumber(INBOX, true, passei);
    Wait(30);
  }while(passei != DESVIROU);

}

void MandaContinuar(){//TESTAR
  int passei = NAO;



  //do{
    //bip();
    SendRemoteNumber(CONEXAO, OUTBOX, CONTINUA);
    //ReceiveRemoteNumber(INBOX, true, passei);
   // Wait(30);
  //}while(passei != CONTINUA);
  //bip();
  //bip();

  //bip();
}

void Pega(){
    while(MotorTachoCount(MOTOR_GARRA) != 0){
        ResetTachoCount(MOTOR_GARRA);
    }
    OnFwd(MOTOR_GARRA,POTENCIA_MAXIMA_GARRA);
    while(MotorTachoCount(MOTOR_GARRA)>(ANGULO_1));
    Off(MOTOR_GARRA);
    Wait(TEMPO_DEPOIS_DE_JOGAR_DENTRO);
}

void FechaDeLeves(){
    int tc,tc1;

    OnFwd(MOTOR_GARRA,POTENCIA_MED_GARRA);
    tc = MotorTachoCount(MOTOR_GARRA);
    do{
        Wait(50);
        tc1 = tc;
        tc = MotorTachoCount(MOTOR_GARRA);

    }while(tc1!=tc)
    Off(MOTOR_GARRA);
}

void VoltaAoNormal(){
     int tc,tc1;
    while(MotorTachoCount(MOTOR_GARRA) != 0){
        ResetTachoCount(MOTOR_GARRA);
    }
    Wait(TEMPO_DEPOIS_DE_JOGAR_DENTRO);
    OnRev(MOTOR_GARRA,POTENCIA_MED_GARRA);
    tc = MotorTachoCount(MOTOR_GARRA);
    do{
        Wait(50);
        tc1 = tc;
        tc = MotorTachoCount(MOTOR_GARRA);

    }while(tc1!=tc)

}

int filterRGB(int s){//Ve se tem boneco
   /*passar o sensor como parametro (s = X-1 (de INT_X))*/
    float media = 0, alfa = 0.01 ;
    int leitura;
    unsigned int x;
    leitura = SensorRaw(s);
    media = leitura ;
    //condiçao de loop de 2segundos para pegar leituras e filtrar elas
    while( (x=CurrentTick())<(x+2)){
        leitura = SensorRaw(s);
        media = ((1-alfa)*media) + (alfa*leitura) ;
        //NumOut(0, LCD_LINE1, media);
        //Wait(10);
        //ClearScreen();
    }
    if (s == 0){
      if (media > COR_BASE_DIR_MAX && media < COR_BASE_DIR_MIN){
        return 0;
      }else{
        return 1; 
      }   
    }else if(s == 1){
      if (media > COR_BASE_ESQ_MAX && media < COR_BASE_ESQ_MIN){
        return 0;
      }else{
        return 1; 
      }   
    }

}

void  bip(){
  PlaySound(SOUND_DOWN);
}
