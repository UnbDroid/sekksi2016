
//DEFINES

     //Bluetooth
     #define CONEXAO 0
     #define INBOX 2
     #define OUTBOX 1



     // Defines de sensores
     #define RGB_DIR IN_1
     #define RGB_ESQ IN_2
     #define RGB_MEIO IN_3
     #define US_FRENTE IN_4

     // Defines de motores
     #define MOTOR_GARRA OUT_A

    // Defines de leitura do RGB do meio (ainda precisa testar mais)
    #define COR_PRETA_MEIO_MIN 55
    #define COR_PRETA_MEIO_MAX 150
    #define COR_BRANCA_MEIO_MIN 290
    #define COR_BRANCA_MEIO_MAX 630
    #define COR_BASE_MEIO_MIN 185
    #define COR_BASE_MEIO_MAX 260

    // Defines de leitura do RGB da esquerda do robô
    #define COR_PRETA_ESQ_PERTO_MIN 75
    #define COR_PRETA_ESQ_PERTO_MAX 100
    #define COR_PRETA_ESQ_LONGE_MIN 120
    #define COR_PRETA_ESQ_LONGE_MAX 160
    #define COR_BRANCA_ESQ_PERTO_MIN 470
    #define COR_BRANCA_ESQ_PERTO_MAX 495
    #define COR_BRANCA_ESQ_LONGE_MIN 212
    #define COR_BRANCA_ESQ_LONGE_MAX 245
    #define COR_BASE_ESQ_MIN 195
    #define COR_BASE_ESQ_MAX 210

    // Defines de leitura do RGB da direita do robô
    #define COR_PRETA_DIR_PERTO_MIN 130
    #define COR_PRETA_DIR_PERTO_MAX 160
    #define COR_PRETA_DIR_LONGE_MIN 185
    #define COR_PRETA_DIR_LONGE_MAX 210
    #define COR_BRANCA_DIR_PERTO_MIN 385
    #define COR_BRANCA_DIR_PERTO_MAX 420
    #define COR_BRANCA_DIR_LONGE_MIN 240
    #define COR_BRANCA_DIR_LONGE_MAX 280
    #define COR_BASE_DIR_MIN 240
    #define COR_BASE_DIR_MAX 260

    //potencias
    #define POTENCIA_MAXIMA_GARRA 80

    //Tempos
    #define TEMPO_ATE_A_GARRA_TRAVAR 2000
    #define TEMPO_ATE_JOGAR_DENTRO 3750
    #define TEMPO_ATE_A_GARRA_VOLTAR 2000 //estou usando tempo... rola de usar por angulos depois
    #define TEMPO_DEPOIS_DE_JOGAR_DENTRO_GARANTIA 800

    //misc
    #define MENOR_DISTANCIA_US 15


     //LOGICA

     #define direita 1
     #define esquerda 2

     #define SIM 5
     #define SIM_US 1
     #define NAO_US 3
     #define SIM_GARRA 2
     #define NAO 0
     #define CONTINUA 6
     #define VIROU 7
    #define DESVIROU 8
       //Bluetooth
     #define PARADO 0
     #define BONECO_BRANCO 4
     #define BONECO_PRETO 5
     #define LeGARRA_SENSOR 3
     #define NAO_PEGA 9
     #define PEGA_OU_NAOPEGA 10
     #define PEGA 11
       //dist
     #define DIST_RE 30
     #define DIST_DA_PAREDE 8
       //cores
     #define COR_VERDE 5 
     #define COR_AZUL 3 // 3 ou 14, 3 eh mais certo
     #define COR_PRETA 12 //12 ou 17, 12 eh mais certo
     #define COR_NEUTRA 13//BRANCO fica acima de 13

void InicializaSensores(void);
int filterUS(void);
int filterRGB(int s);
void pega(void);
int RecebeBoneco();
void EnviaUSFrente();
void EnviaGarra();
void NaoPega();
void IdentificaBoneco(int s);
void MandaExecutivoContinuar();

//debug
int returnUS();
void teste1(void);
void teste2(void);


int bonecoAlvo = 0;

void InicializaSensores(){
    SetSensorColorRed(RGB_DIR);
    SetSensorColorRed(RGB_ESQ);
    SetSensorColorRed(RGB_MEIO);
    SetSensorLowspeed(US_FRENTE);
}

int returnUS(){
  int valor = 0;
  valor = SensorUS(US_FRENTE);
  if(valor < MENOR_DISTANCIA_US){
    return 1;
  }
  else
    return 0;
}

int filterUS(){
    float media = 0, alfa = 0.2 ;
    int leitura, i;
    unsigned int x=0, aux;
    for(i=0;i<5;i++){
        media=media+SensorUS(US_FRENTE);
        Wait(10);
    }
    media=media/5;
    //condiÃ§ao de loop de 1segundo para pegar leituras e filtrar elas
    aux=CurrentTick();

    while(x<=1000){
        x=CurrentTick()-aux;
        leitura = SensorUS(US_FRENTE);
        media = ((1-alfa)*media) + (alfa*leitura) ;
        /*ClearScreen();
        NumOut(0, LCD_LINE1, media);
        Wait(10);*/

    }
    if (media < MENOR_DISTANCIA_US){
            return 1;
    }else{
            return 0;
    }
}

int filterRGB(int s){
     /*passar o sensor como parametro (s = X-1 (de INT_X))*/
    float media = 0, alfa = 0.01 ;
    int leitura, i;
    unsigned int x=0, aux;
    

    for(i=0;i<5;i++){
        media=media+SensorRaw(s);
        Wait(10);
    }
    //condiÃ§ao de loop de 2segundos para pegar leituras e filtrar elas
    aux=CurrentTick();
    while(x<=1950){
        x=CurrentTick()-aux;
        leitura = SensorRaw(s);
        media = ((1-alfa)*media) + (alfa*leitura) ;
        //NumOut(0, LCD_LINE1, media);
        //Wait(10);
        //ClearScreen();
    }
    if (s == 0){
        if (media > COR_BASE_DIR_MAX || media < COR_BASE_DIR_MIN){

            return 1;
        }else{
            return 0;
        }
    }else if(s == 1){
        if (media > COR_BASE_ESQ_MAX || media < COR_BASE_ESQ_MIN){

            return 1;
        }else{
            return 0;
        }
    }
}

int RecebeBoneco(){
     int sinInicial = 0;
     do{  
          ReceiveRemoteNumber(INBOX, 0, sinInicial);
          Wait(30);    
     }while(sinInicial == 0);
     SendRemoteNumber(CONEXAO, OUTBOX, SIM);
     Wait(30);
     
     if(sinInicial == BONECO_PRETO)
          return BONECO_PRETO;
     else if(sinInicial == BONECO_BRANCO)
          return BONECO_BRANCO;
}

void EnviaUSFrente2(){
   int sinalUS = 0, verifica = 0, passei = 0;
     //sinalUS = filterUS();
     sinalUS = returnUS();
     if(sinalUS != 0){
       do{
          SendRemoteNumber(CONEXAO, OUTBOX, SIM_US); 
          ReceiveRemoteNumber(INBOX, 0, passei);
       }while(passei == NAO);      
      }else if(sinalUS == 0){
        do{
          SendRemoteNumber(CONEXAO, OUTBOX, NAO_US); 
          ReceiveRemoteNumber(INBOX, 0, passei);
       }while(passei == NAO);
      }
}

void Bip(){
  PlaySound(SOUND_UP);
  PlaySound(SOUND_DOWN);
  Wait(SEC_1);        
}

void EnviaUSFrente(){
     int sinalUS = 0, verifica = 0, passei = 0;
     //sinalUS = filterUS();
     sinalUS = returnUS();
     if(sinalUS != 0){
          do{  
               ReceiveRemoteNumber(INBOX, 0, verifica);
               Wait(30);    
          }while(verifica == NAO);
          SendRemoteNumber(CONEXAO, OUTBOX, SIM);
          if(verifica == LeGARRA_SENSOR){
               do{
                  SendRemoteNumber(CONEXAO, OUTBOX, SIM_US); 
                  ReceiveRemoteNumber(INBOX, 0, passei);
               }while(passei == NAO);
          }
     }
}

void EnviaGarra(){//TESTE
     int sinalRGBE = 0,sinalRGBC = 0,sinalRGBD = 0, verifica = 0;
     sinalRGBE = filterRGB(RGB_ESQ);
     sinalRGBC = filterRGB(RGB_MEIO);
     sinalRGBD = filterRGB(RGB_DIR);

     if((sinalRGBD != 0)||(sinalRGBC != 0)||(sinalRGBE != 0)){

     do{  
          ReceiveRemoteNumber(INBOX, 0, verifica);
          Wait(30);    
      }while(verifica == 0);

      if(verifica == LeGARRA_SENSOR){
         SendRemoteNumber(CONEXAO, OUTBOX, SIM_GARRA);
         do{
            ReceiveRemoteNumber(INBOX, 0, verifica);
            Wait(30);
         }while(verifica!= PARADO);
         SendRemoteNumber(CONEXAO, OUTBOX, SIM_GARRA);   //RECEBEU QUE ESTA PARADO

         IdentificaBoneco(bonecoAlvo);
      }
    }
}



void NaoPega(){
  /*manda um sinal pro executivo iniciar a rotina pra descartar boneco, espera a resposta dele para abrir
  a garra e deixar o boneco no lugar*/
  int verifica = 0;
  
  do{
    SendRemoteNumber(CONEXAO, OUTBOX, NAO_PEGA);
    ReceiveRemoteNumber(INBOX, 0, verifica);
    Wait(30);
  }while(verifica != NAO_PEGA);

  do{
      SendRemoteNumber(CONEXAO, OUTBOX, VIROU);
      ReceiveRemoteNumber(INBOX, 0, verifica);
      Wait(30);
  }while(verifica != VIROU);

  do{
      SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
      ReceiveRemoteNumber(INBOX, 0, verifica);
      Wait(30);
  }while(verifica != PARADO);

  OnFwd(MOTOR_GARRA,-POTENCIA_MAXIMA_GARRA);
  Wait(TEMPO_ATE_A_GARRA_TRAVAR);
  
  do{
    SendRemoteNumber(CONEXAO, OUTBOX, DESVIROU);
    ReceiveRemoteNumber(INBOX, 0, verifica);
    Wait(30);
  }while(verifica == DESVIROU);

  MandaExecutivoContinuar();

  Off(MOTOR_GARRA);
  /*manda resposta para confirmar que a garra está aberta, para o executivo se afastar do boneco e seguindo parede*/
}

void pega(){

  int verifica = 0;

  do{
    SendRemoteNumber(CONEXAO, OUTBOX, PEGA);
    ReceiveRemoteNumber(INBOX, 0, verifica);
    Wait(30);
  }while(verifica != PEGA);

  do{
    SendRemoteNumber(CONEXAO, OUTBOX, PARADO);
    ReceiveRemoteNumber(INBOX, 0, verifica);
    Wait(30);
  }while(verifica != PARADO);


  OnFwd(MOTOR_GARRA,POTENCIA_MAXIMA_GARRA);
  Wait(TEMPO_ATE_JOGAR_DENTRO);
  Off(MOTOR_GARRA);
  Wait(TEMPO_DEPOIS_DE_JOGAR_DENTRO_GARANTIA);
  OnFwd(MOTOR_GARRA,-POTENCIA_MAXIMA_GARRA);
  Wait(TEMPO_ATE_A_GARRA_VOLTAR);
  Off(MOTOR_GARRA);

  MandaExecutivoContinuar();

}

void IdentificaBoneco(int s){
/* x refere a qual cor temos que pegar 0 branco 1 preto*/
  OnFwd(MOTOR_GARRA,POTENCIA_MAXIMA_GARRA);
  Wait(TEMPO_ATE_A_GARRA_TRAVAR);
  Off(MOTOR_GARRA);
  if(s == BONECO_BRANCO){
    if(SensorRaw(RGB_MEIO) > COR_BRANCA_MEIO_MIN && SensorRaw(RGB_MEIO) < COR_BRANCA_MEIO_MAX){
      pega();
    }else{
      /*avisa pro robo que temos boneco errado na garra e espera ele girar*/
      NaoPega();
    }
  }else if(s == BONECO_PRETO){
    if(SensorRaw(RGB_MEIO) > COR_PRETA_MEIO_MIN && SensorRaw(RGB_MEIO) < COR_PRETA_MEIO_MAX){
      pega();
    }else{
      /*avisa pro robo que temos boneco errado na garra e espera ele girar*/
      NaoPega();
    }
  }
  /*avisa pro robo que o processo de pegar o boneco acabou pra ele andar de novo*/
}



void MandaExecutivoContinuar(){
     int verifica = 0;
     do{
          ReceiveRemoteNumber(INBOX, 0, verifica);
          if(verifica == PARADO){
               SendRemoteNumber(CONEXAO, OUTBOX, CONTINUA);     
          }
          Wait(30);
     }while(verifica!= PARADO);//MANDA CONTINUAR
}

void teste1(){
     int x, i;
     int aux=0;
     
     SetSensorUltrasonic(IN_4);
     TextOut(30, LCD_LINE1, "passei1");
     
     while(aux==0)
     {
          ReceiveRemoteNumber(INBOX, 0, aux);
          Wait(30);
     }
     SendRemoteNumber(CONEXAO, OUTBOX, 1);
     TextOut(30, LCD_LINE2, "passei2");
     while(TRUE)
     {
          x = SensorUS(IN_4);
          NumOut(30, LCD_LINE4, x);
          if(x<15)
          {
               SendRemoteNumber(CONEXAO, OUTBOX, SIM);
               TextOut(30, LCD_LINE3, "passei3");
               Wait(200);
          }
          else{
               SendRemoteNumber(CONEXAO, OUTBOX, NAO);
               Wait(200);
          }
          Wait(30);
     }
}

void PrintaSensores(){
//  while(1){
    ClearScreen();
    TextOut(0, LCD_LINE1, "US_FRENTE: ");
    NumOut(0, LCD_LINE2, SensorUS(US_FRENTE));
    Wait(30);
  //}
}


void teste2(){
     InicializaSensores();
     bonecoAlvo = RecebeBoneco();

     if(bonecoAlvo == BONECO_BRANCO){
          PlaySound(SOUND_UP);
          PlaySound(SOUND_DOWN);
          Wait(SEC_1);
     }else if(bonecoAlvo == BONECO_PRETO){
          PlaySound(SOUND_LOW_BEEP);
          Wait(MS_500);
          PlaySound(SOUND_FAST_UP);
     }
/*
    do{
     //EnviaUSFrente(); 
     EnviaUSFrente2();
     PrintaSensores();
     //EnviaGarra();
    }while(1);*/
}

task main()
{
     teste2();
}
