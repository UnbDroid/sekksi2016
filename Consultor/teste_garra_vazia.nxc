// Defines de sensores
#define RGB_DIR IN_1
#define RGB_ESQ IN_2
#define RGB_MEIO IN_3
#define US_FRENTE IN_4

// Defines de motores
#define MOTOR_GARRA OUT_A

//
#define NAO_ALIEN 0
#define SIM_ALIEN 1

#define VETOR_CALIBRACAO 11



// Defines de leitura do RGB do meio (ainda precisa testar mais)
#define COR_PRETA_MEIO_MIN 55
#define COR_PRETA_MEIO_MAX 150
#define COR_BRANCA_MEIO_MIN 290
#define COR_BRANCA_MEIO_MAX 630
#define COR_BASE_MEIO_MIN 185
#define COR_BASE_MEIO_MAX 260

// Defines de leitura do RGB da esquerda do robô
#define COR_PRETA_ESQ_PERTO_MIN 75
#define COR_PRETA_ESQ_PERTO_MAX 100
#define COR_PRETA_ESQ_LONGE_MIN 120
#define COR_PRETA_ESQ_LONGE_MAX 160
#define COR_BRANCA_ESQ_PERTO_MIN 470
#define COR_BRANCA_ESQ_PERTO_MAX 495
#define COR_BRANCA_ESQ_LONGE_MIN 212
#define COR_BRANCA_ESQ_LONGE_MAX 245
#define COR_BASE_ESQ_MIN 265
#define COR_BASE_ESQ_MAX 310

// Defines de leitura do RGB da direita do robô
#define COR_PRETA_DIR_PERTO_MIN 130
#define COR_PRETA_DIR_PERTO_MAX 160
#define COR_PRETA_DIR_LONGE_MIN 185
#define COR_PRETA_DIR_LONGE_MAX 210
#define COR_BRANCA_DIR_PERTO_MIN 385
#define COR_BRANCA_DIR_PERTO_MAX 420
#define COR_BRANCA_DIR_LONGE_MIN 240
#define COR_BRANCA_DIR_LONGE_MAX 280
#define COR_BASE_DIR_MIN 260
#define COR_BASE_DIR_MAX 310

//potencias
#define POTENCIA_MAXIMA_GARRA -80
#define POTENCIA_MED_GARRA -40

//Tempos
#define TEMPO_ATE_A_GARRA_TRAVAR 1000
#define TEMPO_ATE_JOGAR_DENTRO 2000
#define TEMPO_ATE_A_GARRA_VOLTAR 2000 //estou usando tempo... rola de usar por angulos depois
#define TEMPO_DEPOIS_DE_JOGAR_DENTRO_GARANTIA 800

//misc
#define MENOR_DISTANCIA_US 20

//LOGICA
#define direita
#define esquerda 2

//defines dos buffers utilizados na comunicação, com cada um sendo utilizado para uma atividade específica
#define OUTBOX_INICIALIZA 0  /*buffers referentes ao processo de conectar os cérebros*/
#define INBOX_INICIALIZA 1
#define OUTBOX_USFRENTE 2   /*buffers referentes aos processos relacionados com o sensor US frontal*/
#define INBOX_USFRENTE 3
#define OUTBOX_GARRA 4   /*buffers referentes aos processos relacionados com as garras*/
#define INBOX_GARRA 5



void InicializaSensores(){
    SetSensorColorRed(RGB_DIR);
    SetSensorColorRed(RGB_ESQ);
    SetSensorColorGreen(RGB_MEIO);
    SetSensorLowspeed(US_FRENTE);
}

int lerSensor(int sensor){
   int i, j, k, aux;
   int leitura[VETOR_CALIBRACAO];

   for(i=0; i<VETOR_CALIBRACAO; i++){
      aux = SensorRaw(sensor);

      j = 0;
      while(aux < leitura[j] && j<i){
         j++;
      }

      if(j<i){
         for(k=i; k>j; k--){
            leitura[k] = leitura[k-1];
         }
         leitura[j] = aux;
      }
      else{
         leitura[i] = aux;
      }
   }

   return leitura[(VETOR_CALIBRACAO - 1)/2];
}

void Bip(){
  PlaySound(SOUND_UP);
  PlaySound(SOUND_DOWN);
  Wait(SEC_1);
}




task main(){
   InicializaSensores();
   int tc, old_tc, deu_merda,min, max, leitura;

   while(1){
      ClearScreen();
      TextOut(0, LCD_LINE1, "3");
      Wait(1000);
      ClearScreen();
      TextOut(0, LCD_LINE1, "2");
      Wait(1000);
      ClearScreen();
      TextOut(0, LCD_LINE1, "1");
      Wait(1000);
      ClearScreen();

      deu_merda = 0;

      OnFwd(MOTOR_GARRA,-30);
      tc = MotorTachoCount(MOTOR_GARRA);
      do
      {
        Wait(200);
        old_tc = tc;
        tc = MotorTachoCount(MOTOR_GARRA);
        if(tc<-125)
        {
            OnFwd(MOTOR_GARRA,0);
            Bip();
            deu_merda = 1;
            old_tc = tc;
        }
      }while(tc!=old_tc);

      OnFwd(MOTOR_GARRA,0);

      //NumOut(0,LCD_LINE1,tc);
      if(!deu_merda)
      {
        min = 9900;
        max = -100;
        while(SensorUS(US_FRENTE) > 7)
        {
           leitura = lerSensor(RGB_MEIO);

           if(leitura < min){
             min = leitura;
           }
           if(leitura > max){
              max = leitura;
           }


          ClearScreen();

           NumOut(0, LCD_LINE1, max);
           NumOut(0, LCD_LINE2, leitura);
           NumOut(0, LCD_LINE3, min);
        }
      }

      ClearScreen();

      OnFwd(MOTOR_GARRA,30);
      tc = MotorTachoCount(MOTOR_GARRA);
      do
      {
        Wait(200);
        old_tc = tc;
        tc = MotorTachoCount(MOTOR_GARRA);
      }while(tc!=old_tc);

      OnFwd(MOTOR_GARRA,0);

   }

}
