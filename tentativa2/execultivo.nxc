//SENSORES E MOTORES
#define MD OUT_B //motor da direita
#define ME OUT_A //motor da esquerda
#define MED OUT_AB
#define MDE OUT_AB
#define MP OUT_C //motor da porta
#define USD IN_1 //Utrasonico da direita
#define USE IN_2 //Utrasonico da esquerda
#define HTD IN_3//hitech da direita
#define HTE IN_4//hitech da esquerda

//constantes de locamoção
#define FATORSYNC 1

//LOGICA
#define direita 1
#define esquerda 2

//DEFINES BLUETOOTH
	#define CONECTA TRUE
	#define DESCONECTA FALSE
	#define TEMPO_CONECTAR_BT 4000
	//defines da conexao
	#define CONN 1
	#define INBOX 1
	#define OUTBOX 2
	#define INBOX_US 3

//defines da struct

	#define CONSULTOR "LECA"
	#define ACAO CONECTA
	#define CONEXAO 1

//cor dos boncos
#define BONECO_BRANCO 1
#define BONECO_PRETO 2
#define BONECO_VERMELHO 3

//angulos
#define ANGULOREJEITADIREITA 1700
#define ANGCORRECAOVOLTA 165

//
#define NAO_ALIEN 0
#define SIM_ALIEN 1

//códigos para comunicação BlueTooth
#define TESTE -1
#define PARAR 1
#define SEGUIR 2
#define GIREI 3
#define DESGIRAR 4
#define REJEITAR 5
#define DESGIREI 6

//variáveis globais

//declaração das funções
void executivo();
void init();
void desligaBlue();
void inicializaSensores();
void iniciaBlue();
void andar();
void parar();
void rejeitar();
void rejeitarDireita();
void voltarejeitarDireita();
void MandaGirei();
void AbrirPorta();
void FecharPorta();
void MandaDesGirei();
int RecebeUS();
int RecebeDesgirar();
void viraEsq(int angulo);
void viraDir(int angulo);
int distanciaGiroDireita(int grau);
int distanciaGiroEsquerda(int grau);


//função para dbug
void  bip()
{
  PlaySound(SOUND_DOWN);
}

//função principal
task main()
{
	executivo();
}

//assinatura das funções
void executivo()
{
  int aux, us_frente = 200, us_frente_temp;

	init();

	andar();//implementar
	while(1)//void loop
	{
		ReceiveRemoteNumber(INBOX, true, aux);
		switch(aux)
		{
			case PARAR:
				parar();
			break;
			case SEGUIR:
				andar();
			break;
			case REJEITAR:
				rejeitar();
				andar();
			break;
			case TESTE:
				viraDir(180);
				AbrirPorta();
				andar();
				Wait(4000);
				parar();
				while(1){}
			break;
			default :
				us_frente_temp = RecebeUS();
				if(us_frente_temp)
					us_frente = us_frente_temp;
		}
	}
}

void init()
{
	desligaBlue();
  	inicializaSensores();
  	FecharPorta();
	iniciaBlue();
}

void desligaBlue()
{
	CommBTConnectionType DADOS_BT;
	DADOS_BT.Name = CONSULTOR;
	DADOS_BT.ConnectionSlot = CONEXAO;
	DADOS_BT.Action = DESCONECTA;
	do{
	SysCommBTConnection(DADOS_BT);

	Wait(30);//30 ms eh o tempo de comunicacao minima bluetooth entre dois bricks

	}while(BluetoothStatus(CONEXAO)== NO_ERR);
	TextOut(0, LCD_LINE1, "Desligou Bluetooth");
}

void inicializaSensores()
{
  SetSensorLowspeed(USD);
  SetSensorLowspeed(USE);
  SetSensorLowspeed(HTD);
  SetSensorLowspeed(HTE);
}

void iniciaBlue()
{// FUNCAO INICIA COMUNICACAO BLUETOOTH
	CommBTConnectionType DADOS_BT;
	DADOS_BT.Name = CONSULTOR;
	DADOS_BT.ConnectionSlot = CONEXAO;
	DADOS_BT.Action = ACAO;

	SysCommBTConnection(DADOS_BT);
	Wait(TEMPO_CONECTAR_BT);
	TextOut(0, LCD_LINE2, "Conectou Bluetooth");
}

void andar()//melhorar esse função - apneas testes por enquanto
{
	//OnFwd(MD,90);
	//OnFwd(ME,90);
	OnFwdSync(MDE,90,FATORSYNC);
}

void parar()
{
	Off(MD);
	Off(ME);
}

void rejeitar()
{
	parar();
	//implementar uma função para decidir para qual lado deve girar
	rejeitarDireita();
	MandaGirei();
	while(!RecebeDesgirar()){}
	voltarejeitarDireita();
	MandaDesGirei();
}

void rejeitarDireita()
{
	int tc;

	OnFwd(ME,90);

	do{
     tc = MotorTachoCount(ME);
  }while(tc<ANGULOREJEITADIREITA);

	parar();
}

void voltarejeitarDireita()
{
	int tc;

	OnFwd(ME,-90);

	do {
		tc = MotorTachoCount(ME);
	} while(tc>(-ANGULOREJEITADIREITA)-ANGCORRECAOVOLTA);

	parar();
}

void MandaGirei()
{
	SendRemoteNumber(CONEXAO, OUTBOX, GIREI);
}

void MandaDesGirei()
{
	SendRemoteNumber(CONEXAO, OUTBOX, DESGIREI);
}


void AbrirPorta()
{
    int tc, old_tc;

   	OnFwd(MP,70);
	tc = MotorTachoCount(MP);
	do
	 {
	  Wait(200);
	  old_tc = tc;
	  tc = MotorTachoCount(MP);
	}while(tc!=old_tc);

	OnFwd(MP,0);
}

void FecharPorta()
{
	int tc, old_tc;

   	OnFwd(MP,-70);
	tc = MotorTachoCount(MP);
	do
	 {
	  Wait(200);
	  old_tc = tc;
	  tc = MotorTachoCount(MP);
	}while(tc!=old_tc);

	OnFwd(MP,0);
}

int RecebeUS()
{
	int aux;

	ReceiveRemoteNumber(INBOX_US, true, aux);

	return aux;
}

int RecebeDesgirar()
{
	int aux;
  	ReceiveRemoteNumber(INBOX, true, aux);
  	if(aux == DESGIRAR)
    	return 1;
  	return 0;
}

void viraEsq(int angulo){ // função que faz o robô girar para a esquerda o ângulo recebido
     OnFwd(MD, 90);
     OnFwd(ME, -90);

     while(distanciaGiroEsquerda((MotorTachoCount(MD) - MotorTachoCount(ME))/2) < angulo)
     {
      //lol
     }
     Off(MD);
     Off(ME);
}


void viraDir(int angulo){ // função que faz o robô girar para a direita o ângulo recebido
     OnFwd(MD, -90);
     OnFwd(ME, 90);

     while(distanciaGiroDireita((- MotorTachoCount(MD) + MotorTachoCount(ME))/2) < angulo)
     {
      //lol
     }
     Off(MD);
     Off(ME);
}

int distanciaGiroDireita(int grau){
	   return (((grau*17)/149)); // COMO FOI FEITA ESSA CONVERSÃO??? [na base da tentativa e erro]
}

int distanciaGiroEsquerda(int grau){
	   return (((grau*17)/159));
}