//SENSORES E MOTORES
#define MD OUT_B //motor da direita
#define ME OUT_A //motor da esquerda
#define MP OUT_C //motor da porta
#define USD IN_1 //Utrasonico da direita
#define USE IN_2 //Utrasonico da esquerda
#define HTD IN_3//hitech da direita
#define HTE IN_4//hitech da esquerda
#define MD_ME OUT_AB// os dois motores de movimento

//CONSTANTES ANDAR
#define DIST_1M 100
#define DIST_2M 200

//Declaração de funções
int distanciaTachoCount(int grau);
int distanciaGiro(int grau);
void AndaReto();
void Regula(int iteracoes);
void MyOnFwd(int motor, int pot);
void testeTacho();

void RetoPID();

//Declaração de variáveis globais
int poteGlobal = 90;
int potdGlobal = 80;
int MyTcD = 0;
int MyTcE = 0;

task main(){
    //AndaReto();
  //RetoPID();
  testeTacho();
}

int distanciaTachoCount(int grau){
     return (3*grau);                   //Distancia a ser percorrid/Raio da roda
}

int distanciaGiro(int grau){
     return (((grau*17)/149)); // COMO FOI FEITA ESSA CONVERSÃO??? [na base da tentativa e erro]
}

void Regula(int iteracoes){
     int i = 0;

     while(i < iteracoes){
        if(MotorTachoCount(MD) > MotorTachoCount(ME)){
            if(poteGlobal < 90){
               poteGlobal += 1;
            }else
               potdGlobal -= 1;

        }else if(MotorTachoCount(MD) < MotorTachoCount(ME)){
            if(potdGlobal < 90){
               potdGlobal += 1;
            }else
               poteGlobal -= 1;
        }
        i++;
     }
     
     
}


void AndaReto(){
     int tachoE = 0, tachoD = 0;
     MyOnFwd(MD, potdGlobal);
     MyOnFwd(ME, poteGlobal);
     Regula(10);
     
     while(distanciaTachoCount((tachoE + tachoD)/2)<DIST_2M*100){
        tachoE = MotorTachoCount(ME);
        tachoD = MotorTachoCount(MD);
        Regula(6);
     }
     MyOnFwd(MD, 0);
     MyOnFwd(ME, 0);
}

void MyOnFwd(int motor, int pot)
{
  //bip();
  //Wait(350)
  if(motor == MD)
  {
    MyTcD += MotorTachoCount(motor);
  }
  else if(motor == ME)
  {
    MyTcE += MotorTachoCount(motor);
  }
  //bip();
  OnFwd(motor,pot);
}

void RetoPID()
{
  int tachoE = 0, tachoD = 0;
  OnFwdSyncPID(MD_ME,potdGlobal,1,200,100,200);

  while(distanciaTachoCount((tachoE + tachoD)/2)<DIST_2M*100){
        tachoE = MotorTachoCount(ME);
        tachoD = MotorTachoCount(MD);
     }
     MyOnFwd(MD, 0);
     MyOnFwd(ME, 0);
     Wait(100);
     tachoE = 0;
     tachoD = 0;
     OnRevSyncPID(MD_ME,potdGlobal,1,100,100,150);
     while(distanciaTachoCount((tachoE + tachoD)/2)> - DIST_2M*100){
        tachoE = MotorTachoCount(ME);
        tachoD = MotorTachoCount(MD);
     }
     MyOnFwd(MD, 0);
     MyOnFwd(ME, 0);


}

void testeTacho(){
  int tachoD = 0, tachoE = 0;



  tachoD = MotorTachoCount(MD);

  NumOut(0, LCD_LINE1, tachoD);
  
  
  OnFwdSyncPID(MD_ME,potdGlobal,1,200,100,200);
  
   while(distanciaTachoCount((tachoE + tachoD)/2)<DIST_2M*100){
        tachoE = MotorTachoCount(ME);
        tachoD = MotorTachoCount(MD);
        NumOut(0, LCD_LINE3, tachoD);
     }
     OnFwdSyncPID(MD_ME,potdGlobal,1,200,100,200);
     Wait(100);

     tachoD = MotorTachoCount(MD);
     NumOut(0, LCD_LINE4, tachoD);
     Off(MD_ME);
     
while(1);
}
 
